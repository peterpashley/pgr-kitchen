using UnityEngine;
using System.Collections;
using System.Collections.Generic;
public class MeshCombineTag : MonoBehaviour
{
	// This component specifies data about how the game object is to be considered if the mesh combine script is run
	public enum MeshTag
	{
		CombineAllBelow,
		DoNotCombine,
	}

	public MeshTag meshTag;

	public bool staticBatch = false;
	public bool staticLightMap = true;
	public bool staticLightMapOffset = true;
	public bool RippleData = true;
	public bool ReflectionData = true;
	public bool PhysicsData = true;

	#if UNITY_EDITOR
	public void Generate()
	{
		ShowSource(); 
		DeleteCombined();

		LevelBuilderFunctions builder = new LevelBuilderFunctions();
		builder._excludeWhiteBox = false;
		builder.CombineChildren(transform);
	


		ShowCombined();
	}
	bool CheckTreeForCombineTag(Transform child)
	{
		while (child != null && child != transform)
		{
			if (child.GetComponent<MeshCombineTag>())
			{
				if (child.GetComponent<MeshCombineTag>().meshTag!=MeshTag.CombineAllBelow)
				{
					return true;
				}
			}
			child = child.parent;
		}
		return false;
	}
	public void ShowCombined()
	{
		if (meshTag == MeshTag.DoNotCombine)
		{
			return;
		}
		MeshRenderer[] childmeshes = GetComponentsInChildren<MeshRenderer>();
		for (int i = 0; i < childmeshes.Length; i++)
		{
			if (CheckTreeForCombineTag(childmeshes[i].transform))
			{
				continue;
			}
			if (childmeshes[i].enabled == true)
			{
				if (childmeshes[i].tag != "AutoGeneratedVis" && childmeshes[i].tag != "AutoGeneratedRef")
				{
					childmeshes[i].enabled = false;
				}
			}
			else
			{
				if (childmeshes[i].tag == "AutoGeneratedVis" )
				{
					childmeshes[i].enabled = true;
				}
			}
		}

	}

	public void ShowSource()
	{
		//for all children,
		//check if child has a meshcombinetag between us and them 
		//if not check tag
		//deacticate generatedVis tag
		//activate all tags other than generated ones
		if (meshTag == MeshTag.DoNotCombine)
		{
			return;
		}
		MeshRenderer[] childmeshes = GetComponentsInChildren<MeshRenderer>();
		for (int i = 0; i < childmeshes.Length; i++)
		{
			if (CheckTreeForCombineTag(childmeshes[i].transform))
			{
				continue;
			}
			if (childmeshes[i].enabled == false)
			{
				if (childmeshes[i].tag != "AutoGeneratedVis" )
				{
					childmeshes[i].enabled = true;
				}
			}
			else
			{
				if (childmeshes[i].tag == "AutoGeneratedVis" )
				{
					childmeshes[i].enabled = false;
				}
			}
		}


	}

	public void DeleteCombined()
	{
		if (meshTag == MeshTag.DoNotCombine)
		{
			return;
		}
		MeshRenderer[] childmeshes = GetComponentsInChildren<MeshRenderer>();
		for (int i = 0; i < childmeshes.Length; i++)
		{
			if (childmeshes[i].tag == "AutoGeneratedVis")
			{
				GameObject.DestroyImmediate(childmeshes[i].gameObject);
			}
		}

			
	}
#endif
}
